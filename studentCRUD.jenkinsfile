pipeline{
    agent any 
    
    tools{
        maven  "MAVEN_HOME"
    }

    stages{

       stage('Environment variables '){
            steps{
                echo "Running on ${env.JENKINS_URL} on location ${env.JENKINS_HOME} where build id is ${env.BUILD_ID} and name is ${env.BUILD_DISPLAY_NAME} on workspace ${env.WORKSPACE} using java "
            }
        }

        stage('Checkout'){
            steps{
                    echo "checkouting ...."
                    checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/VinitPania/studentCURD.git']])
            }
        }

        stage('build'){
            steps{
                echo "building..."
                //bat 'mvn clean verify package'
                bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }

        stage('backup'){
            steps{
                echo "backup..."
                bat ('xcopy E:\\devops\\jenkins_home\\.jenkins\\workspace\\studentCRUD  E:\\devops\\backup\\studentCRUD /y /v /s /e')
            }
        }

        stage('test'){
            steps{
                echo "test..."
                bat " mvn install -DskipTests=true"
            }
        }

        stage("html-report"){
            steps{
                echo 'HTML-Report'
                //bat 'mvn surefire-report:report'
                bat 'mvn surefire-report:report'
            }
        }

        stage('code quality test'){
            steps{
                echo "code quality test... with sonarqube"
                withSonarQubeEnv('SQ1'){
                    bat "mvn  -Dmaven.test.failure.ignore=true clean package sonar:sonar -Dsonar.projectkey=studentCRUD -Dsonar.host.url=http://localhost:9000"
                }
                
            }
        }

        stage('deploy'){
            steps{
                echo "deploying... with tomcat"

            }
        }

        stage('Clean Workspace '){
            steps{
                cleanWS()
            }
        }

        
    }

    post{
        always{
            archiveArtifacts artifacts: 'archiveArtifacts artifacts: \'**/*.jar\''
        }
    }
}